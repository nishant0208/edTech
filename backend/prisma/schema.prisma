// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  role      UserRole
  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  admin     Admin?
  teacher   Teacher?
  student   Student?
  parent    Parent?

  @@map("users")
}

enum UserRole {
  ADMIN
  TEACHER
  STUDENT
  PARENT
}

model Admin {
  id     String @id @default(cuid())
  userId String @unique
  name   String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("admins")
}

model Teacher {
  id            String        @id @default(cuid())
  userId        String        @unique
  teacherId     String        @unique @default(cuid())
  name          String
  phone         String?
  address       String?
  dateOfJoining DateTime?
  qualification String?
  status        TeacherStatus @default(ACTIVE)
  subject       String?
  branch        String?
  user          User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  subjects    Subject[]
  classes     Class[]
  assignments Assignment[]

  @@map("teachers")
}

enum TeacherStatus {
  ACTIVE
  ON_LEAVE
  INACTIVE
}

model Student {
  id            String    @id @default(cuid())
  userId        String    @unique
  studentId     String    @unique
  name          String
  phone         String?
  address       String?
  dateOfBirth   DateTime?
  admissionDate DateTime?
  classId       String?
  branch        String?
  fees          Fee[]
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  class         Class?    @relation(fields: [classId], references: [id])

  parents StudentParent[]

  @@map("students")
}

model Parent {
  id           String  @id @default(cuid())
  userId       String  @unique
  name         String
  phone        String?
  address      String?
  occupation   String?
  relationship String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  // Relationships
  children StudentParent[]

  @@map("parents")
}

model StudentParent {
  id        String @id @default(cuid())
  studentId String
  parentId  String

  student Student @relation(fields: [studentId], references: [id], onDelete: Cascade)
  parent  Parent  @relation(fields: [parentId], references: [id], onDelete: Cascade)

  @@unique([studentId, parentId])
  @@map("student_parents")
}

model Event {
  id        String   @id @default(cuid())
  title     String
  date      DateTime
  type      String
  createdAt DateTime @default(now())
}

model Lead {
  id              String   @id @default(cuid())
  studentName     String
  parentName      String?
  contactEmail    String?
  contactPhone    String?
  desiredClass    String?
  status          String   @default("Pending")
  rejectionReason String?
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
}

model Branch {
  id       String @id @default(cuid())
  name     String @unique
  students Int
  teachers Int
  classes  Int
}

model Fee {
  id        String   @id @default(cuid())
  studentId String
  amount    Int
  status    String
  date      DateTime @default(now())

  student Student @relation(fields: [studentId], references: [id])
}

model Class {
  id        String   @id @unique @default(cuid())
  name      String   @unique
  grade     Int
  section   String
  capacity  Int?
  createdAt DateTime @default(now())

  students    Student[]
  teachers    Teacher[]
  subjects    ClassSubject[]
  assignments Assignment[]

  @@unique([grade, section])
  @@map("classes")
}

model Subject {
  id          String  @id @default(cuid())
  name        String  @unique
  code        String  @unique
  description String?
  credits     Int?
  teacherId   String?

  teacher Teacher? @relation(fields: [teacherId], references: [id])

  classes     ClassSubject[]
  assignments Assignment[]

  @@map("subjects")
}

model ClassSubject {
  id        String @id @default(cuid())
  classId   String
  subjectId String

  class   Class   @relation(fields: [classId], references: [id], onDelete: Cascade)
  subject Subject @relation(fields: [subjectId], references: [id], onDelete: Cascade)

  @@unique([classId, subjectId])
  @@map("class_subjects")
}

model Assignment {
  id        String   @id @default(cuid())
  name      String
  classId   String
  subjectId String
  teacherId String
  createdAt DateTime @default(now())

  class   Class   @relation(fields: [classId], references: [name])
  subject Subject @relation(fields: [subjectId], references: [name])
  teacher Teacher @relation(fields: [teacherId], references: [id])

  @@map("assignments")
}
