// components/BulkUploadModule.tsx
/* eslint-disable @typescript-eslint/no-unused-vars */
import React, { useState } from "react";
import Papa, { ParseResult } from "papaparse";

// --- Interfaces for Upload Records (Matching CSV Structure) ---
// These interfaces define the expected shape of data parsed from your CSV files.
// IMPORTANT: Align these field names with your CSV headers and ensure data types
// are compatible for eventual conversion to your Prisma model types on the backend.

// StudentUploadRecord: Reflects fields for Student model + linking fields for User and Parent
interface StudentUploadRecord {
  // User Model fields
  email: string; // Used for User creation/linking
  // Student Model fields
  name: string; // Maps to student.name
  phone?: string;
  address?: string;
  dateOfBirth?: string; // Expected format: YYYY-MM-DD
  admissionDate?: string; // Expected format: YYYY-MM-DD
  class_name?: string; // Custom field for linking to Class by name (backend resolves to classId)
  parent_email?: string; // Custom field for linking to Parent by email (backend resolves to parentId via User)
  // No studentId here, as it's @unique @default(cuid()) in Prisma and generated by DB
}

// ParentUploadRecord: Reflects fields for Parent model + linking fields for User
interface ParentUploadRecord {
  // User Model fields
  email: string; // Used for User creation/linking
  // Parent Model fields
  name: string; // Maps to parent.name
  phone?: string;
  address?: string;
  occupation?: string;
  relationship?: string; // e.g., 'Mother', 'Father', 'Guardian'
  // No parentId here, as it's @default(cuid()) in Prisma and generated by DB
}

// TeacherUploadRecord: Reflects fields for Teacher model + linking fields for User
interface TeacherUploadRecord {
  // User Model fields
  email: string; // Used for User creation/linking
  // Teacher Model fields
  name: string; // Maps to teacher.name
  phone?: string;
  address?: string;
  dateOfJoining?: string; // Expected format: YYYY-MM-DD
  qualification?: string;
  status?: "ACTIVE" | "ON_LEAVE" | "INACTIVE"; // Must be exact enum string values
  subject?: string; // Primary subject string
  // Additional fields for relationships if needed, e.g., comma-separated for multiple
  subjects_taught?: string; // Comma-separated list of subject names (backend parses to link Subject model)
  classes_taught_names?: string; // Comma-separated list of class names (backend parses to link Class model)
  // No teacherId here, as it's @unique @default(cuid()) in Prisma and generated by DB
}

type RecordType = "students" | "parents" | "teachers";

type UploadableRecord =
  | StudentUploadRecord
  | ParentUploadRecord
  | TeacherUploadRecord;

const BulkUploadModule: React.FC = () => {
  const [selectedFile, setSelectedFile] = useState<File | null>(null);
  const [uploadingType, setUploadingType] = useState<RecordType | null>(null);
  const [message, setMessage] = useState<{
    type: "success" | "error" | "info";
    text: string;
  } | null>(null);
  const [isLoading, setIsLoading] = useState<boolean>(false);

  const handleFileChange = (event: React.ChangeEvent<HTMLInputElement>) => {
    if (event.target.files && event.target.files[0]) {
      setSelectedFile(event.target.files[0]);
      setMessage(null); // Clear previous messages
    } else {
      setSelectedFile(null);
    }
  };

  const parseCsv = (file: File): Promise<UploadableRecord[]> => {
    return new Promise((resolve, reject) => {
      Papa.parse<UploadableRecord>(file, {
        header: true, // Treat first row as headers
        skipEmptyLines: true,
        transformHeader: (header: string) => header.trim().replace(/\s/g, "_"), // Optional: clean headers (e.g., "First Name" -> "First_Name")
        complete: (results: ParseResult<UploadableRecord>) => {
          if (results.errors.length) {
            console.error("CSV Parsing errors:", results.errors);
            reject(
              new Error(
                "CSV parsing failed: " +
                  results.errors
                    .map((e: { message: string }) => e.message)
                    .join(", ")
              )
            );
          } else {
            resolve(results.data);
          }
        },
        error: (err: Error) => {
          reject(err);
        },
      });
    });
  };

  const uploadRecords = async (type: RecordType, data: UploadableRecord[]) => {
    setIsLoading(true);
    setMessage(null);

    // Define the specific API endpoint for each record type
    const endpointMap: Record<RecordType, string> = {
      students: "/api/students/bulk-upload",
      parents: "/api/parents/bulk-upload",
      teachers: "/api/teachers/bulk-upload",
    };

    const apiUrl = endpointMap[type];

    try {
      const response = await fetch(apiUrl, {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
          // IMPORTANT: Add any authentication headers if your backend requires them
          // e.g., 'Authorization': `Bearer ${yourAuthToken}`
        },
        body: JSON.stringify(data), // Send the parsed array of objects directly
      });

      if (!response.ok) {
        let errorData;
        try {
          errorData = await response.json(); // Attempt to parse JSON error message
        } catch {
          errorData = {
            message: response.statusText || "Unknown error occurred.",
          }; // Fallback for non-JSON errors
        }
        throw new Error(
          `Upload failed (${response.status}): ${
            errorData.message || JSON.stringify(errorData)
          }`
        );
      }

      const result = await response.json(); // Backend might return { count: N } or success message
      setMessage({
        type: "success",
        text: `Successfully uploaded ${
          result.count || data.length
        } ${type} records!`,
      });
      setSelectedFile(null); // Clear file input on success
    } catch (error: unknown) {
      console.error(`Error uploading ${type} records:`, error);
      if (error instanceof Error) {
        setMessage({
          type: "error",
          text: `Failed to upload ${type} records: ${error.message}`,
        });
      } else {
        setMessage({
          type: "error",
          text: `An unknown error occurred while uploading ${type} records.`,
        });
      }
    } finally {
      setIsLoading(false);
    }
  };

  const handleSubmit = async (type: RecordType) => {
    if (!selectedFile) {
      setMessage({
        type: "error",
        text: "Please select a CSV file to upload.",
      });
      return;
    }

    setUploadingType(type); // Indicate which type is being uploaded for loading state
    setMessage({
      type: "info",
      text: `Processing ${selectedFile.name} for ${type} data...`,
    });

    try {
      const parsedData = await parseCsv(selectedFile);
      if (parsedData.length === 0) {
        setMessage({
          type: "error",
          text: "CSV file is empty or contains no valid data rows.",
        });
        return;
      }
      console.log(`Parsed ${type} data:`, parsedData);
      await uploadRecords(type, parsedData);
    } catch (error: unknown) {
      console.error("Error during CSV parsing or upload preparation:", error);
      if (error instanceof Error) {
        setMessage({ type: "error", text: `Error: ${error.message}` });
      } else {
        setMessage({
          type: "error",
          text: `An unknown error occurred during CSV processing.`,
        });
      }
    } finally {
      setUploadingType(null); // Reset uploading state
    }
  };

  return (
    <div className="font-inter max-w-4xl mx-auto py-8 px-4 sm:px-6 lg:px-8">
      <h2 className="text-3xl font-bold text-blue-700 mb-6 pb-3 border-b border-gray-200">
        Bulk Data Upload
      </h2>
      <p className="text-gray-600 mb-6">
        Upload multiple records for students, parents, or teachers by selecting
        a CSV file below. Ensure your CSV file&apos;s headers and data types
        match the expected format for each record type.
      </p>

      {message && (
        <div
          className={`p-4 mb-6 rounded-md ${
            message.type === "success"
              ? "bg-green-100 text-green-800 border border-green-400"
              : message.type === "error"
              ? "bg-red-100 text-red-800 border border-red-400"
              : "bg-blue-100 text-blue-800 border border-blue-400"
          }`}
        >
          {message.text}
        </div>
      )}

      <div className="bg-white rounded-xl shadow-lg p-6 mb-8 border border-gray-200">
        <h3 className="text-2xl font-semibold text-gray-800 mb-4">
          Select CSV File
        </h3>
        <input
          type="file"
          accept=".csv"
          onChange={handleFileChange}
          className="block w-full text-sm text-gray-500
            file:mr-4 file:py-2 file:px-4
            file:rounded-full file:border-0
            file:text-sm file:font-semibold
            file:bg-blue-50 file:text-blue-700
            hover:file:bg-blue-100
            disabled:opacity-50 disabled:cursor-not-allowed"
          disabled={isLoading}
        />
        {selectedFile && (
          <p className="mt-4 text-gray-700">
            Selected file:{" "}
            <span className="font-medium">{selectedFile.name}</span>
          </p>
        )}
      </div>

      <div className="grid grid-cols-1 md:grid-cols-3 gap-6">
        <div className="bg-white rounded-xl shadow-lg p-6 border border-gray-200 flex flex-col items-center justify-between">
          <div>
            <h3 className="text-xl font-semibold text-gray-800 mb-3">
              Upload Students
            </h3>
            <p className="text-sm text-gray-600 text-center mb-4">
              Required: `email`, `name`
              <br />
              Optional: `phone`, `address`, `dateOfBirth` (YYYY-MM-DD),
              `admissionDate` (YYYY-MM-DD), `class_name`, `parent_email`
            </p>
          </div>
          <button
            onClick={() => handleSubmit("students")}
            className="w-full bg-blue-600 text-white px-6 py-3 rounded-md font-semibold cursor-pointer hover:bg-blue-700 transition-colors duration-200 shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed mt-4"
            disabled={
              !selectedFile || isLoading || uploadingType === "students"
            }
          >
            {isLoading && uploadingType === "students"
              ? "Uploading..."
              : "Upload Student CSV"}
          </button>
        </div>

        <div className="bg-white rounded-xl shadow-lg p-6 border border-gray-200 flex flex-col items-center justify-between">
          <div>
            <h3 className="text-xl font-semibold text-gray-800 mb-3">
              Upload Parents
            </h3>
            <p className="text-sm text-gray-600 text-center mb-4">
              Required: `email`, `name`
              <br />
              Optional: `phone`, `address`, `occupation`, `relationship` (e.g.,
              &apos;Mother&apos;, &apos;Father&apos;)
            </p>
          </div>
          <button
            onClick={() => handleSubmit("parents")}
            className="w-full bg-green-600 text-white px-6 py-3 rounded-md font-semibold cursor-pointer hover:bg-green-700 transition-colors duration-200 shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-green-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed mt-4"
            disabled={!selectedFile || isLoading || uploadingType === "parents"}
          >
            {isLoading && uploadingType === "parents"
              ? "Uploading..."
              : "Upload Parent CSV"}
          </button>
        </div>

        <div className="bg-white rounded-xl shadow-lg p-6 border border-gray-200 flex flex-col items-center justify-between">
          <div>
            <h3 className="text-xl font-semibold text-gray-800 mb-3">
              Upload Teachers
            </h3>
            <p className="text-sm text-gray-600 text-center mb-4">
              Required: `email`, `name`
              <br />
              Optional: `phone`, `address`, `dateOfJoining` (YYYY-MM-DD),
              `qualification`, `status` (ACTIVE/ON_LEAVE/INACTIVE), `subject`
              (primary), `subjects_taught` (comma-separated),
              `classes_taught_names` (comma-separated)
            </p>
          </div>
          <button
            onClick={() => handleSubmit("teachers")}
            className="w-full bg-purple-600 text-white px-6 py-3 rounded-md font-semibold cursor-pointer hover:bg-purple-700 transition-colors duration-200 shadow-md hover:shadow-lg focus:outline-none focus:ring-2 focus:ring-purple-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed mt-4"
            disabled={
              !selectedFile || isLoading || uploadingType === "teachers"
            }
          >
            {isLoading && uploadingType === "teachers"
              ? "Uploading..."
              : "Upload Teacher CSV"}
          </button>
        </div>
      </div>
    </div>
  );
};

export default BulkUploadModule;
